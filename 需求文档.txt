## 需求文档：智能图表生成器

**项目名称：** 智能图表生成器（AI Chart Generator）

### 1. 引言

#### 1.1 目的

本文档旨在明确“智能图表生成器”纯前端项目的需求。该项目旨在提供一个用户友好的界面，允许用户输入数据，通过集成大模型（LLM）的智能分析能力，自动推荐并配置ECharts图表，最终生成可视化图表、图片或代码。

#### 1.2 范围

本项目为纯前端应用，不涉及后端业务逻辑开发（LLM调用直接从前端发起）。主要功能包括：数据输入、大模型API配置、图表类型智能推荐、图表参数动态配置、ECharts图表渲染、图表导出（图片、SVG、代码）。

#### 1.3 目标用户

*   数据分析师
*   业务决策者
*   开发者
*   任何需要快速将数据可视化的人员

### 2. 功能需求 (Functional Requirements)

#### 2.1 数据输入与管理 (FR-001)

*   **FR-001.01 数据输入框：** 提供一个大型文本输入区域，允许用户粘贴或手动输入原始数据。
    *   **考量：** 支持多种数据格式，如CSV（逗号分隔值）、TSV（制表符分隔值）、JSON数组（对象数组）、纯文本等。前端需具备基础的数据解析能力。
*   **FR-001.02 数据清除：** 提供一个“清除”按钮，用于清空输入框中的数据。
*   **FR-001.03 数据预处理提示：** 在输入框旁或下方，可提供简单的格式示例或提示，引导用户输入有效数据。

#### 2.2 大模型 (LLM) API 配置 (FR-002)

*   **FR-002.01 API 配置界面：** 提供一个独立的配置区域，允许用户输入其大模型的API Key和API Endpoint（URL）。
    *   **考量：** API Key应以安全的方式存储在浏览器本地（如localStorage），且不应在UI上直接明文显示（可显示部分或使用星号掩盖）。
*   **FR-002.02 配置保存与加载：** 提供“保存配置”按钮，将配置持久化到本地存储；应用启动时自动加载已保存的配置。
*   **FR-002.03 配置清除：** 提供“清除配置”按钮，用于删除本地存储的API Key和Endpoint。
*   **FR-002.04 连接测试：** 提供“测试连接”按钮，用于验证API Key和Endpoint的有效性。

#### 2.3 大模型智能分析 - 图表类型推荐 (FR-003)

*   **FR-003.01 发起分析请求：** 用户点击“分析数据”或类似按钮后，前端将输入数据连同预设的Prompt发送给LLM。
    *   **Prompt设计考量：** Prompt应清晰指示LLM分析数据结构、内容，并推荐适合的ECharts图表类型（如柱状图、折线图、饼图、散点图等），并说明推荐理由。
*   **FR-003.02 推荐结果展示：** LLM返回分析结果后，前端解析并以列表或卡片形式展示推荐的图表类型。
    *   **考量：** 每种推荐类型应附带简要描述或示意图（如果可能），帮助用户理解。
*   **FR-003.03 用户选择：** 用户可以从推荐列表中选择一个图表类型。
*   **FR-003.04 加载与错误处理：** 在LLM分析过程中显示加载状态（如Spinner），并妥善处理LLM返回的错误或无推荐结果的情况。

#### 2.4 大模型智能分析 - 图表配置表单生成 (FR-004)

*   **FR-004.01 发起配置请求：** 用户选择图表类型后，前端将原始数据、选定的图表类型以及预设的Prompt再次发送给LLM。
    *   **Prompt设计考量：** Prompt应指示LLM根据原始数据和选定图表类型，生成该图表对应的ECharts配置参数建议，特别是可自定义的轴、系列、图例等关键配置项，并以结构化数据（如JSON）返回。
*   **FR-004.02 动态表单渲染：** 前端解析LLM返回的配置参数建议，动态生成一个配置表单。
    *   **表单字段类型考量：**
        *   **列选择器：** 对于X轴、Y轴、系列数据等，提供下拉选择框，列出原始数据中的所有可用列名供用户选择。
        *   **数值输入：** 对于标题、单位、字体大小等参数，提供文本输入框、数字输入框。
        *   **布尔开关：** 对于是否显示图例、是否堆叠等，提供开关或复选框。
        *   **颜色选择器：** 如果LLM能推荐颜色，可提供颜色选择器。
    *   **FR-004.03 表单数据绑定：** 表单字段应与ECharts的Options结构对应，方便后续直接生成图表配置。
*   **FR-004.04 默认值与提示：** 表单字段应填充LLM提供的默认值（如果LLM有提供），并提供友好的提示信息。
*   **FR-004.05 表单验证：** 对用户在表单中的输入进行基本的数据类型验证（如确保数值字段输入的是数字）。
*   **FR-004.06 加载与错误处理：** 在LLM生成表单配置过程中显示加载状态，并妥善处理LLM返回的错误。

#### 2.5 图表生成与预览 (FR-005)

*   **FR-005.01 实时预览：** 用户在配置表单中调整参数时，图表区域应实时更新并显示预览效果。
*   **FR-005.02 ECharts渲染：** 使用ECharts库根据用户配置和原始数据渲染图表。
*   **FR-005.03 图表交互：** 渲染的ECharts图表应支持ECharts自带的基本交互，如缩放、平移、提示框等。

#### 2.6 图表导出 (FR-006)

*   **FR-006.01 导出为图片：** 提供“导出PNG”按钮，将当前图表导出为PNG格式图片。
*   **FR-006.02 导出为SVG：** 提供“导出SVG”按钮，将当前图表导出为SVG格式图片。
*   **FR-006.03 导出为代码：** 提供“导出ECharts Option代码”按钮，将当前图表的所有ECharts配置选项以JSON格式展示或复制到剪贴板。

### 3. 非功能需求 (Non-Functional Requirements)

#### 3.1 性能 (Performance)

*   **NFR-001.01 响应速度：** 数据输入、LLM调用、图表渲染等操作应在合理时间内完成，提供良好的用户体验（例如，LLM调用等待时间应有明确提示）。
*   **NFR-001.02 资源占用：** 页面应避免过高的内存和CPU占用，即使处理中等规模的数据量。

#### 3.2 可用性 (Usability)

*   **NFR-002.01 用户界面 (UI)：** 界面设计应简洁、直观，布局合理，易于理解和操作。
*   **NFR-002.02 用户体验 (UX)：** 提供清晰的操作指引、加载状态、错误提示和成功反馈。
*   **NFR-002.03 响应式设计：** 界面应能适应不同屏幕尺寸（桌面、平板）。
*   **NFR-002.04 国际化 (可选)：** 如果未来有需求，应考虑支持多语言。

#### 3.3 安全性 (Security)

*   **NFR-003.01 API Key 安全：** 用户的API Key仅存储在浏览器本地，不上传到任何服务器。在前端展示时应进行脱敏处理。
*   **NFR-003.02 数据隐私：** 用户输入的数据仅用于前端处理和LLM调用，不进行任何形式的持久化存储或分享。

#### 3.4 兼容性 (Compatibility)

*   **NFR-004.01 浏览器兼容：** 兼容主流现代浏览器，如Chrome、Firefox、Edge、Safari的最新版本。

#### 3.5 可维护性与可扩展性 (Maintainability & Extensibility)

*   **NFR-005.01 代码结构：** 代码应模块化、组件化，遵循清晰的架构模式，便于理解、测试和维护。
*   **NFR-005.02 配置化：** LLM的Prompt、ECharts的默认配置等应尽可能通过配置方式管理，便于后续调整和优化。
*   **NFR-005.03 新LLM集成：** 架构应支持未来集成其他LLM服务的能力。
*   **NFR-005.04 新图表类型：** 架构应支持未来扩展新的ECharts图表类型和其对应的配置逻辑。

### 4. 技术选型建议

*   **前端框架：** React / Vue.js / Angular (任选其一，推荐React或Vue，生态成熟，社区活跃)
*   **图表库：** ECharts
*   **UI组件库：** Ant Design / Element UI / Material-UI (根据前端框架选择，提供美观且功能丰富的UI组件)
*   **数据解析：** lodash (工具库), 或自定义解析逻辑
*   **HTTP请求：** Fetch API / Axios
*   **状态管理：** Redux / Zustand (for React) 或 Vuex / Pinia (for Vue) (根据项目复杂度和团队偏好选择)
*   **构建工具：** Vite / Webpack

### 5. 界面原型/流程图 (概念性)

#### 5.1 整体布局

*   左侧区域：数据输入框、LLM API配置区。
*   中间区域：LLM分析结果（图表类型推荐）、动态配置表单。
*   右侧区域：ECharts图表预览区、导出按钮区。

#### 5.2 用户操作流程

1.  **启动应用：** 用户打开网页。
2.  **配置API (首次或修改)：**
    *   用户进入API配置区。
    *   输入API Key和Endpoint。
    *   点击“保存配置”并可选“测试连接”。
3.  **输入数据：**
    *   用户在数据输入框粘贴或输入数据。
    *   点击“分析数据”按钮。
4.  **LLM分析 - 图表类型推荐 (第一步)：**
    *   显示加载状态。
    *   LLM返回推荐的图表类型列表。
    *   用户从列表中选择一个图表类型。
5.  **LLM分析 - 图表配置表单生成 (第二步)：**
    *   显示加载状态。
    *   LLM返回该图表类型可配置的参数建议。
    *   前端动态渲染配置表单。
6.  **图表配置与预览：**
    *   用户在动态表单中选择列、输入参数等。
    *   右侧图表区域实时更新预览。
7.  **图表导出 (第三步)：**
    *   用户对图表满意后，点击“导出PNG”、“导出SVG”或“导出代码”按钮。
    *   完成导出操作。

### 6. 风险与挑战

*   **LLM输出的不确定性：** 大模型返回的分析结果（图表类型、配置参数）可能不总是完全符合预期或格式不一致，需要健壮的解析和容错机制。
*   **Prompt Engineering：** 设计有效的Prompt以引导LLM生成高质量、结构化的图表建议和配置是关键且具有挑战性的任务。
*   **数据解析复杂性：** 原始数据的多样性（CSV、JSON、纯文本）增加了前端解析的复杂性。
*   **动态表单渲染：** 根据LLM返回的动态配置信息生成交互式表单，需要灵活的UI组件和数据绑定逻辑。
*   **ECharts配置映射：** 将用户在动态表单中的选择和输入，准确映射到ECharts的复杂Options结构，需要深入理解ECharts。
*   **性能优化：** 处理大数据量时，前端数据处理和ECharts渲染的性能优化。
